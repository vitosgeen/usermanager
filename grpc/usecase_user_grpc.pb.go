// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: usecase_user.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserUsecaseClient is the client API for UserUsecase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserUsecaseClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	GetUsersByPaginationQuery(ctx context.Context, in *GetUsersByPaginationQueryRequest, opts ...grpc.CallOption) (*GetUsersByPaginationQueryResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error)
	GetUserByNickname(ctx context.Context, in *GetUserByNicknameRequest, opts ...grpc.CallOption) (*GetUserByNicknameResponse, error)
	CheckUserByNickname(ctx context.Context, in *CheckUserByNicknameRequest, opts ...grpc.CallOption) (*CheckUserByNicknameResponse, error)
	VoteUser(ctx context.Context, in *VoteUserRequest, opts ...grpc.CallOption) (*VoteUserResponse, error)
	VoteUserWithdraw(ctx context.Context, in *VoteUserWithdrawRequest, opts ...grpc.CallOption) (*VoteUserWithdrawResponse, error)
	FindExistVoting(ctx context.Context, in *FindExistVotingRequest, opts ...grpc.CallOption) (*FindExistVotingResponse, error)
	FindVotesForUser(ctx context.Context, in *FindVotesForUserRequest, opts ...grpc.CallOption) (*FindVotesForUserResponse, error)
	LoadVotesToUsers(ctx context.Context, in *LoadVotesToUsersRequest, opts ...grpc.CallOption) (*LoadVotesToUsersResponse, error)
	GetLastVoteForUser(ctx context.Context, in *GetLastVoteForUserRequest, opts ...grpc.CallOption) (*GetLastVoteForUserResponse, error)
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
}

type userUsecaseClient struct {
	cc grpc.ClientConnInterface
}

func NewUserUsecaseClient(cc grpc.ClientConnInterface) UserUsecaseClient {
	return &userUsecaseClient{cc}
}

func (c *userUsecaseClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUsecaseClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUsecaseClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUsecaseClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUsecaseClient) GetUsersByPaginationQuery(ctx context.Context, in *GetUsersByPaginationQueryRequest, opts ...grpc.CallOption) (*GetUsersByPaginationQueryResponse, error) {
	out := new(GetUsersByPaginationQueryResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/GetUsersByPaginationQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUsecaseClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUsecaseClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error) {
	out := new(GetUserByIDResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUsecaseClient) GetUserByNickname(ctx context.Context, in *GetUserByNicknameRequest, opts ...grpc.CallOption) (*GetUserByNicknameResponse, error) {
	out := new(GetUserByNicknameResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/GetUserByNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUsecaseClient) CheckUserByNickname(ctx context.Context, in *CheckUserByNicknameRequest, opts ...grpc.CallOption) (*CheckUserByNicknameResponse, error) {
	out := new(CheckUserByNicknameResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/CheckUserByNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUsecaseClient) VoteUser(ctx context.Context, in *VoteUserRequest, opts ...grpc.CallOption) (*VoteUserResponse, error) {
	out := new(VoteUserResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/VoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUsecaseClient) VoteUserWithdraw(ctx context.Context, in *VoteUserWithdrawRequest, opts ...grpc.CallOption) (*VoteUserWithdrawResponse, error) {
	out := new(VoteUserWithdrawResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/VoteUserWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUsecaseClient) FindExistVoting(ctx context.Context, in *FindExistVotingRequest, opts ...grpc.CallOption) (*FindExistVotingResponse, error) {
	out := new(FindExistVotingResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/FindExistVoting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUsecaseClient) FindVotesForUser(ctx context.Context, in *FindVotesForUserRequest, opts ...grpc.CallOption) (*FindVotesForUserResponse, error) {
	out := new(FindVotesForUserResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/FindVotesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUsecaseClient) LoadVotesToUsers(ctx context.Context, in *LoadVotesToUsersRequest, opts ...grpc.CallOption) (*LoadVotesToUsersResponse, error) {
	out := new(LoadVotesToUsersResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/LoadVotesToUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUsecaseClient) GetLastVoteForUser(ctx context.Context, in *GetLastVoteForUserRequest, opts ...grpc.CallOption) (*GetLastVoteForUserResponse, error) {
	out := new(GetLastVoteForUserResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/GetLastVoteForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUsecaseClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserUsecase/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserUsecaseServer is the server API for UserUsecase service.
// All implementations must embed UnimplementedUserUsecaseServer
// for forward compatibility
type UserUsecaseServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	GetUsersByPaginationQuery(context.Context, *GetUsersByPaginationQueryRequest) (*GetUsersByPaginationQueryResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error)
	GetUserByNickname(context.Context, *GetUserByNicknameRequest) (*GetUserByNicknameResponse, error)
	CheckUserByNickname(context.Context, *CheckUserByNicknameRequest) (*CheckUserByNicknameResponse, error)
	VoteUser(context.Context, *VoteUserRequest) (*VoteUserResponse, error)
	VoteUserWithdraw(context.Context, *VoteUserWithdrawRequest) (*VoteUserWithdrawResponse, error)
	FindExistVoting(context.Context, *FindExistVotingRequest) (*FindExistVotingResponse, error)
	FindVotesForUser(context.Context, *FindVotesForUserRequest) (*FindVotesForUserResponse, error)
	LoadVotesToUsers(context.Context, *LoadVotesToUsersRequest) (*LoadVotesToUsersResponse, error)
	GetLastVoteForUser(context.Context, *GetLastVoteForUserRequest) (*GetLastVoteForUserResponse, error)
	Vote(context.Context, *VoteRequest) (*VoteResponse, error)
	mustEmbedUnimplementedUserUsecaseServer()
}

// UnimplementedUserUsecaseServer must be embedded to have forward compatible implementations.
type UnimplementedUserUsecaseServer struct {
}

func (UnimplementedUserUsecaseServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserUsecaseServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserUsecaseServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserUsecaseServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserUsecaseServer) GetUsersByPaginationQuery(context.Context, *GetUsersByPaginationQueryRequest) (*GetUsersByPaginationQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByPaginationQuery not implemented")
}
func (UnimplementedUserUsecaseServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserUsecaseServer) GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedUserUsecaseServer) GetUserByNickname(context.Context, *GetUserByNicknameRequest) (*GetUserByNicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByNickname not implemented")
}
func (UnimplementedUserUsecaseServer) CheckUserByNickname(context.Context, *CheckUserByNicknameRequest) (*CheckUserByNicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserByNickname not implemented")
}
func (UnimplementedUserUsecaseServer) VoteUser(context.Context, *VoteUserRequest) (*VoteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteUser not implemented")
}
func (UnimplementedUserUsecaseServer) VoteUserWithdraw(context.Context, *VoteUserWithdrawRequest) (*VoteUserWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteUserWithdraw not implemented")
}
func (UnimplementedUserUsecaseServer) FindExistVoting(context.Context, *FindExistVotingRequest) (*FindExistVotingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindExistVoting not implemented")
}
func (UnimplementedUserUsecaseServer) FindVotesForUser(context.Context, *FindVotesForUserRequest) (*FindVotesForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindVotesForUser not implemented")
}
func (UnimplementedUserUsecaseServer) LoadVotesToUsers(context.Context, *LoadVotesToUsersRequest) (*LoadVotesToUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadVotesToUsers not implemented")
}
func (UnimplementedUserUsecaseServer) GetLastVoteForUser(context.Context, *GetLastVoteForUserRequest) (*GetLastVoteForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastVoteForUser not implemented")
}
func (UnimplementedUserUsecaseServer) Vote(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedUserUsecaseServer) mustEmbedUnimplementedUserUsecaseServer() {}

// UnsafeUserUsecaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserUsecaseServer will
// result in compilation errors.
type UnsafeUserUsecaseServer interface {
	mustEmbedUnimplementedUserUsecaseServer()
}

func RegisterUserUsecaseServer(s grpc.ServiceRegistrar, srv UserUsecaseServer) {
	s.RegisterService(&UserUsecase_ServiceDesc, srv)
}

func _UserUsecase_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUsecase_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUsecase_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUsecase_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUsecase_GetUsersByPaginationQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByPaginationQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).GetUsersByPaginationQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/GetUsersByPaginationQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).GetUsersByPaginationQuery(ctx, req.(*GetUsersByPaginationQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUsecase_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUsecase_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUsecase_GetUserByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).GetUserByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/GetUserByNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).GetUserByNickname(ctx, req.(*GetUserByNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUsecase_CheckUserByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserByNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).CheckUserByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/CheckUserByNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).CheckUserByNickname(ctx, req.(*CheckUserByNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUsecase_VoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).VoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/VoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).VoteUser(ctx, req.(*VoteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUsecase_VoteUserWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteUserWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).VoteUserWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/VoteUserWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).VoteUserWithdraw(ctx, req.(*VoteUserWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUsecase_FindExistVoting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindExistVotingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).FindExistVoting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/FindExistVoting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).FindExistVoting(ctx, req.(*FindExistVotingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUsecase_FindVotesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindVotesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).FindVotesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/FindVotesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).FindVotesForUser(ctx, req.(*FindVotesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUsecase_LoadVotesToUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadVotesToUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).LoadVotesToUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/LoadVotesToUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).LoadVotesToUsers(ctx, req.(*LoadVotesToUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUsecase_GetLastVoteForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastVoteForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).GetLastVoteForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/GetLastVoteForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).GetLastVoteForUser(ctx, req.(*GetLastVoteForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUsecase_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUsecaseServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserUsecase/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUsecaseServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserUsecase_ServiceDesc is the grpc.ServiceDesc for UserUsecase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserUsecase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.UserUsecase",
	HandlerType: (*UserUsecaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserUsecase_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserUsecase_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserUsecase_DeleteUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UserUsecase_GetUsers_Handler,
		},
		{
			MethodName: "GetUsersByPaginationQuery",
			Handler:    _UserUsecase_GetUsersByPaginationQuery_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserUsecase_GetUser_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _UserUsecase_GetUserByID_Handler,
		},
		{
			MethodName: "GetUserByNickname",
			Handler:    _UserUsecase_GetUserByNickname_Handler,
		},
		{
			MethodName: "CheckUserByNickname",
			Handler:    _UserUsecase_CheckUserByNickname_Handler,
		},
		{
			MethodName: "VoteUser",
			Handler:    _UserUsecase_VoteUser_Handler,
		},
		{
			MethodName: "VoteUserWithdraw",
			Handler:    _UserUsecase_VoteUserWithdraw_Handler,
		},
		{
			MethodName: "FindExistVoting",
			Handler:    _UserUsecase_FindExistVoting_Handler,
		},
		{
			MethodName: "FindVotesForUser",
			Handler:    _UserUsecase_FindVotesForUser_Handler,
		},
		{
			MethodName: "LoadVotesToUsers",
			Handler:    _UserUsecase_LoadVotesToUsers_Handler,
		},
		{
			MethodName: "GetLastVoteForUser",
			Handler:    _UserUsecase_GetLastVoteForUser_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _UserUsecase_Vote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usecase_user.proto",
}
